on:
  push:
    branches: [ main, overture ]

jobs:

  hello-world:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:

          - release: buster
            date: 20210507
            body: lite
            url-armhf: https://downloads.raspberrypi.org/raspios_lite_armhf/images/raspios_lite_armhf-2021-05-28/2021-05-07-raspios-buster-armhf-lite.zip
            url-arm64: https://downloads.raspberrypi.org/raspios_lite_arm64/images/raspios_lite_arm64-2021-05-28/2021-05-07-raspios-buster-arm64-lite.zip

    env:
      IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/raspberry-pi-os:${{ matrix.release }}-${{ matrix.date }}-${{ matrix.body }}
      DOCKER_BUILDKIT: 1

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: Generate armhf image
        if: ${{ matrix.url-armhf != '' }}
        run: |
          bash generate-root.bash "$IMAGE-armhf" '${{ matrix.url-armhf }}'
          docker push "$IMAGE-armhf"
      - name: Generate arm64 image
        if: ${{ matrix.url-arm64 != '' }}
        run: |
          bash generate-root.bash "$IMAGE-arm64" '${{ matrix.url-arm64 }}'
          docker push "$IMAGE-arm64"
      - name: Merge the images
        run: |
          set -x
          [ -n '${{ matrix.url-armhf }}' ] && do_armhf=1
          [ -n '${{ matrix.url-arm64 }}' ] && do_arm64=1
          ifany() { [ -n "$1" ] && echo "$2"; }
          docker manifest create "$IMAGE" $(ifany '${{ matrix.url-armhf }}' "$IMAGE-armhf") $(ifany '${{ matrix.url-arm64 }}' "$IMAGE-arm64")
          [ -n "$do_armhf" ] && docker manifest annotate "$IMAGE" "$IMAGE-armhf" --os linux --arch arm --variant v6
          [ -n "$do_arm64" ] && docker manifest annotate "$IMAGE" "$IMAGE-arm64" --os linux --arch arm64 --variant v8
          docker manifest push --purge "$IMAGE"
